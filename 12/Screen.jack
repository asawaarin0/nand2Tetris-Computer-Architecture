// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static bool color;
    static Array twoToThe;
    /** Initializes the Screen. */
    function void init() {
    let twoToThe = Array.new(16);
    let twoToThe[0] = 1;
    let twoToThe[1] = 2;
    let twoToThe[2] = 4;
    let twoToThe[3] = 8;
    let twoToThe[4] = 16;
    let twoToThe[5] = 32;
    let twoToThe[6] = 64;
    let twoToThe[7] = 128;
    let twoToThe[8] = 256;
    let twoToThe[9] = 512;
    let twoToThe[10] = 1024;
    let twoToThe[11] = 2048;
    let twoToThe[12] = 4096;
    let twoToThe[13] = 8192;
    let twoToThe[14] = 16384;
    let twoToThe[15] = 16384+16384;
      let color = true;
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    do Screen.setColor(false);
    do Screen.drawRectangle(0,0,511,255);
    return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int address;
      var int value;
      var int secondValue;
      let address = (16384) +(32*y) + (x/16);
      let value = Memory.peek(address);
      let secondValue = twoToThe[(x-(16*(x/16)))];
      if(color = true){
        do Memory.poke(address,value|secondValue);
      }else{
        do Memory.poke(address,value & ~secondValue);
      }
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int a;
      var int b;
      var int dx;
      var int dy;
      var int diff;
      var int incA;
      var int incB;
      let a = 0;
      let b = 0;
      let dx = Math.abs(x2-x1);
      let dy = Math.abs(y2-y1);
      let diff = 0;
      //if both the ending and starting points are the same, just draw a pixel at that points
      if((x1=x2)&(y1=y2)){
        do Screen.drawPixel(x1,y1);
        return;
      }
      if(y2>y1){
        let incB = 1;
      }else{
        if(~(y2=y1)){
          let incB = -1;
        }
      }
      if(x2>x1){
        let incA = 1;
      }else{
      if(~(x2=x1)){
        let incA = -1;
      }
      }
      while((~((Math.abs(a)-dx)>0))&(~((Math.abs(b)-dy)>0))){
        do Screen.drawPixel(x1+a,y1+b);
        if(diff < 0){
          let a = a + incA;
          let diff = diff + dy;
        }else{
          let b = b + incB;
          let diff = diff - dx;
        }
      }
      return;
    }
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int i;
      let i = 0;
      while(i<((y2-y1)+1)){
        do Screen.drawLine(x1,y1+i,x2,y1+i);
        let i = i + 1;
      }
    return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy;
      var int rSquared;
      var int dySquared;
      let dy = -r;
      let rSquared = Math.multiply(r,r);
      while((dy)<(r+1)){
        let dySquared = Math.multiply(dy,dy);
        do Screen.drawLine(x-Math.sqrt(rSquared-dySquared),y+dy,x+Math.sqrt(rSquared-dySquared),y+dy);
        let dy = dy + 1;
      }
    return;
    }
}
