CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x,b=false,sel=zx,out=x1);
    Not16(in=x1,out=notx1);
    Mux16(a=x1,b=notx1,sel=nx,out=x2);

    Mux16(a=y,b=false,sel=zy,out=y1);
    Not16(in=y1,out=noty1);
    Mux16(a=y1,b=noty1,sel=ny,out=y2);

    Add16(a=x2,b=y2,out=out1);
    And16(a=x2,b=y2,out=out2);
    Mux16(a=out2,b=out1,sel=f,out=out3);
    Not16(in=out3,out=notout);
    Mux16(a=out3,b=notout,sel=no,out[0..7]=finalRight,out[8..15]=finalLeft,out=out,out[15]=ng);

     Or8Way(in=finalLeft, out=zrl);
      Or8Way(in=finalRight, out=zrr);
      Or(a=zrl, b=zrr, out=nzr);
      Not(in=nzr, out=zr);

}